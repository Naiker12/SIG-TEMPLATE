// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Modelos de Autenticación y Usuarios ---

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  password        String
  bio             String?
  roleId          String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  role            Role           @relation(fields: [roleId], references: [id])
  files           File[]
  uploadedFiles   FileMetadata[] // Un usuario puede subir muchos archivos
  projects        Project[]      // Un usuario puede crear muchos proyectos

  @@map("User")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  users     User[]
  
  @@map("Role")
}

// --- Modelo de Archivos (Legado) ---

model File {
  id        String   @id @default(uuid())
  filename  String
  fileType  String
  size      Int
  status    String
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("File")
}

// --- Nuevos Modelos para Análisis de Datos ---

model FileMetadata {
  id         String     @id @default(uuid())
  filename   String
  filetype   String
  filepath   String     @unique // Ruta física en el servidor
  columns    String[]
  rows_count Int
  size       Int
  uploadedAt DateTime   @default(now())

  userId     String
  user       User       @relation(fields: [userId], references: [id])
  
  projects   Project[] // Un archivo puede tener varios proyectos de análisis

  @@map("FileMetadata")
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String?
  config      Json       // JSON con la configuración del dashboard (gráficos, filtros)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  fileId      String
  file        FileMetadata @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("Project")
}
