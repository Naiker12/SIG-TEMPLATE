// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("Role")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  bio          String?
  roleId       String
  role         Role           @relation(fields: [roleId], references: [id])
  files        File[]
  FileMetadata FileMetadata[]
  Project      Project[]

  @@map("User")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  fileType  String
  size      Int
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("File")
}

// --- Nuevos modelos para análisis ---
model FileMetadata {
  id         String    @id @default(uuid())
  filename   String
  filetype   String
  filepath   String // Ruta al archivo guardado en el servidor
  columns    String[]
  rows_count Int
  size       Int
  uploadedAt DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  projects   Project[]

  @@map("FileMetadata")
}

model Project {
  id          String     @id @default(uuid())
  name        String
  description String?
  fileId      String
  config      Json // configuración de gráficos, filtros, etc.
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  file        FileMetadata @relation(fields: [fileId], references: [id])

  @@map("Project")
}
