// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  password     String
  bio          String?
  roleId       String?
  role         Role?         @relation(fields: [roleId], references: [id])
  files        File[]
  uploadedFiles FileMetadata[] @relation("UploadedBy")
  projects      Project[]

  @@map("User")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("Role")
}

model File {
  id        String   @id @default(uuid())
  filename  String
  fileType  String
  size      Int
  status    String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("File")
}

// --- Modelos para el nuevo flujo de análisis ---

model FileMetadata {
  id         String   @id @default(uuid())
  filename   String
  filetype   String
  filepath   String   @unique // Ruta física al archivo en el servidor
  columns    String[]
  rows_count Int
  size       Int
  uploadedAt DateTime @default(now())
  userId     String
  user       User     @relation("UploadedBy", fields: [userId], references: [id])
  projects   Project[]

  @@map("FileMetadata")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  fileId      String
  userId      String
  config      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  file        FileMetadata @relation(fields: [fileId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Project")
}
